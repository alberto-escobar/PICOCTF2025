e = 65537

N_values = [
    21109810507784177104658707130650677800549578033509244059250496858444597886157259396895016610516875400515983638639994916316556756400029419478417468211746118,
    23549786614288327117229820846539059134711002404910274784388818559661895256077669727923275608230130358595941386432648876181235896432689316225410104653401362,
    24505319055186227459353698780575500796979181221609002225043493276886222596396063785173025105194615359330976316660951668796659531119949014298564068155167422,
    16253628988653180741763117008165130941969972258235410826646607893160122641521522525032849021876681443642170794926336563389134827609871071498801737942779978,
    22476819109132214924883461795894466780994665536226867107810568671360858260222549997289939358539424199167883443495543284612482070446131855888568419756519418,
    16941360186077736845600466782721230979546482904961731802675951061878552174843353418323161864972718870206368097054494001088998222368786287474422224289362382,
    26618595141903041980245991011365421637084491948312255013231035184819678878966509368773206522583511423206102082402416152257185591355312548118362787676861962
]

cipher_values = [
    9355652354831542120851225711516277775668723014837084227323166718318499986686650174775866096527487380991785456261014247489429828040236838733648843189779271,
    4416353297433822582516885615294402241943253837158119896941216074700650750825981342022407976535609849402026236832793935760075292846659723291728917687266635,
    14325522553037580002738497908502821387546952173795595085423433097740151061976291410030488111752926017996664381943728811822627164487270314631422831428645063,
    7301195355104681982848903154371590098398554363448529482860053816004333266943965445890219904989925894361000968208076433134969686837564045414874174496839395,
    8769432764828020957560691870172375136471971406966219463656471584303575104453654181241674319713914472219724761899439380219304891870553006402235580105346001,
    14913785299235110682891356950831233706689998778051312407388757950657747221665165672405817236458818301798137797490860455675059646545998287116519475851257225,
    25915324612443361149706146311133690852632396562671482321005443937255489432974071834619976053376388927787033305585450440237588625295710941528499207580240031
]

from math import gcd
from Crypto.Util.number import inverse, long_to_bytes

# Check for shared factors between all N values
for i in range(len(N_values)):
    for j in range(i+1, len(N_values)):
        g = gcd(N_values[i], N_values[j])
        if g > 1:
            print(f"Found shared factor between N[{i}] and N[{j}]: {g}")
            
            # Get the other factors
            p = g
            q1 = N_values[i] // p
            q2 = N_values[j] // p
            
            # Calculate private keys
            phi1 = (p-1) * (q1-1)
            phi2 = (p-1) * (q2-1)
            
            d1 = inverse(65537, phi1)
            d2 = inverse(65537, phi2)
            
            # Decrypt the messages
            m1 = pow(cipher_values[i], d1, N_values[i])
            m2 = pow(cipher_values[j], d2, N_values[j])
            
            # Try to convert to text
            try:
                print(f"Message 1: {long_to_bytes(m1).decode('utf-8')}")
            except:
                print(f"Message 1 (raw): {m1}")
            
            try:
                print(f"Message 2: {long_to_bytes(m2).decode('utf-8')}")
            except:
                print(f"Message 2 (raw): {m2}")


for i, N in enumerate(N_values):
    # Check if N is divisible by 2
    if N % 2 == 0:
        p = 2
        q = N // 2
        
        # Calculate Euler's totient
        phi = (p-1) * (q-1)
        
        # Calculate private key
        d = inverse(e, phi)
        
        # Decrypt ciphertext
        plaintext = pow(cipher_values[i], d, N)
        
        try:
            decoded = long_to_bytes(plaintext).decode('utf-8')
            print(f"Decrypted message {i}: {decoded}")
        except:
            print(f"Decryption {i} failed to decode as UTF-8, raw: {plaintext}")